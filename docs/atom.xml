<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns='http://www.w3.org/2005/Atom' xmlns:g='http://base.google.com/ns/1.0'>
  <title>Reasonably Polymorphic</title>
  <updated>2020-10-12T00:40:00Z</updated>
  <author><name>Sandy Maguire</name></author>
  <id>http://reasonablypolymorphic.com</id>
  <link rel='self' href='atom.xml'/>

    <entry>
      <title>Towards Tactic Metaprogramming in Haskell</title>
      <id>blog/towards-tactics/index.html</id>
      <link href='blog/towards-tactics/index.html'/>
      <published>2020-10-12T00:40:00Z</published>
      <updated>2020-10-12T00:40:00Z</updated>

      <content type="html">
        <![CDATA[
        <center>
<img src="/images/fmaptree.gif">
</center>
<p>Isn’t it weird that we treat source code as text? That is, we have this extremely well-structured and strongly-typed object — the abstract syntax tree — that exists conceptually in our minds, and in actuality inside of our compiler, but for some reason we pretend it’s just a pile of bytes and edit it byte-by-byte rather than semantically?</p>
<p>When you stop and think about it, that’s like the stupidest idea ever. We as the authors don’t think of our code as bytes, nor does our interpreter or compiler. But instead we take the semantic understanding inside of our heads, serialize it into bytes, and then get the compiler to parse and rediscover the ideas inside our head. What a waste of effort.</p>
<p>Instead, you can use the incredible <a href="https://totbwf.github.io/">TOTBWF</a> and my new Tactics Plugin for the <a href="https://github.com/haskell/haskell-language-server">Haskell Language Server</a>, which will automatically and intelligently fill holes in your Haskell programs.</p>
<p>This blog post describes what a tactics engine is and why you want one, and is a good introduction to how in the hell we can automatically write your code for you.</p>
<h2 id="tactics">Tactics</h2>
<p>Imagine you’re pair programming with a junior engineer. In the navigator seat, you’ll be guiding your partner through the implementation, guiding them through the high-level strokes and letting them actually do the coding part. In order to implement <code>foldr :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</code>, for example, the guidance you give your partner might be:</p>
<ol type="1">
<li>Bind the function arguments</li>
<li>Case split on the <code>[a]</code> parameter</li>
<li>If it’s <code>[]</code>, do the obvious thing</li>
<li>Otherwise call your function and recurse.</li>
</ol>
<p>These instructions aren’t a real program by any means, but you might call them a “program sketch.” The hard part of programming (thinking about what to do) is captured here, but <em>actually doing it</em> is left as an exercise to the reader.</p>
<p>A tactics engine transforms a program sketch like the above into an actual program. Tactics free us from the tyranny of text editing and pedantic details, allowing us to work at a higher semantic level of programming.</p>
<p>Tactics correspond to semantic operations over our program. Much like how the primitive commands in text editors (delete to end of line, insert parentheses, etc) can be composed to refine the textual representation of one program into the textual representation of another, we can compose small tactics in order to build larger ideas.</p>
<p>As an example, consider how we can fill in the following hole:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Id</span> a <span class="ot">=</span> <span class="dt">Id</span> a</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Id</span> <span class="kw">where</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="ot">  fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Id</span> a <span class="ot">-&gt;</span> <span class="dt">Id</span> b</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>  <span class="fu">fmap</span> <span class="ot">=</span> _</span></code></pre></div>
<p>Rather than writing this function all at once, we can instead build it, one idea at a time. The first step is obviously to bind function arguments (the <code>intros</code> tactic), which results in the refined expression:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Id</span> a <span class="ot">-&gt;</span> <span class="dt">Id</span> b</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ida <span class="ot">-&gt;</span> _</span></code></pre></div>
<p>We’re left with a new hole, but this one is “smaller” than the old one; we’ve refined the previous hole, filling in some of its structure. As a result, the type of our new hole is <code>Id b</code>, and we now have both <code>fab :: a -&gt; b</code> and <code>ida :: Id a</code> in scope. We can simplify the hole further by now pattern matching on <code>ida</code> (the <code>destruct ida</code> tactic):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Id</span> a <span class="ot">-&gt;</span> <span class="dt">Id</span> b</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ida <span class="ot">-&gt;</span> <span class="kw">case</span> ida <span class="kw">of</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>  <span class="dt">Id</span> a <span class="ot">-&gt;</span> _</span></code></pre></div>
<p>The resulting hole still has type <code>Id b</code>, but we’ve now introduced <code>a :: a</code> in scope. Our next step is to build an <code>Id</code> value, which we can do by producing its data constructor (the <code>split</code> tactic):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Id</span> a <span class="ot">-&gt;</span> <span class="dt">Id</span> b</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ida <span class="ot">-&gt;</span> <span class="kw">case</span> ida <span class="kw">of</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>  <span class="dt">Id</span> a <span class="ot">-&gt;</span> <span class="dt">Id</span> _</span></code></pre></div>
<p>Again we’ve shrunk the problem — now our hole has type <code>b</code>. At this point we can call the <code>fab</code> function to produce a <code>b</code> (via the <code>apply fab</code> tactic):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Id</span> a <span class="ot">-&gt;</span> <span class="dt">Id</span> b</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ida <span class="ot">-&gt;</span> <span class="kw">case</span> ida <span class="kw">of</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>  <span class="dt">Id</span> a <span class="ot">-&gt;</span> <span class="dt">Id</span> (fab _)</span></code></pre></div>
<p>All that’s left is a hole with type <code>a</code>. Fortunately, we have <code>a :: a</code> in scope, so we can just plop that in to the hole via the <code>assumption</code> tactic:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Id</span> a <span class="ot">-&gt;</span> <span class="dt">Id</span> b</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ida <span class="ot">-&gt;</span> <span class="kw">case</span> ida <span class="kw">of</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>  <span class="dt">Id</span> a <span class="ot">-&gt;</span> <span class="dt">Id</span> (fab a)</span></code></pre></div>
<p>And just like that, we’ve produced an implementation of our desired function! By thinking in terms of the semantic operations we’d like to perform at each hole (instead of how to manipulate the bytes of text), we’ve changed the level of abstraction at which we think about editing. The implications of this might not be immediately obvious, so let’s explore them together.</p>
<p>Let’s list the tactic steps we took to derive <code>fmap</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>intros</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>destruct ida</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>split</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>apply fab</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>assumption</span></code></pre></div>
<p>Up to alpha renaming, this composition of tactics is sufficient to derive <code>fmap</code> for any sum or product type that doesn’t do anything “exciting” with its type variable. By running the same steps, we can implement <code>fmap</code> for any of the following types:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>(a, b)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="dt">Either</span> a b</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="dt">Maybe</span> a</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a><span class="dt">Const</span> a b</span></code></pre></div>
<p>Let’s convince ourselves of this by quickly running through the derivation for <code>Maybe a</code>. We start again with <code>fmap</code> and its type:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> _</span></code></pre></div>
<p>After running <code>intros</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> _</span></code></pre></div>
<p>and then <code>destruct ma</code></p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> <span class="kw">case</span> ma <span class="kw">of</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> _</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>  <span class="dt">Just</span> a  <span class="ot">-&gt;</span> _</span></code></pre></div>
<p>Applying <code>split</code> here is a little tricky; technically it will force us to try both <code>Nothing</code> and <code>Just _</code> at each hole in a weird sort of quantum superposition. Let’s ignore this detail for right now, and come back to it immediately after finishing the derivation. Assuming we pick the right data cons, after <code>split</code> our program looks like this:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> <span class="kw">case</span> ma <span class="kw">of</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a>  <span class="dt">Just</span> a  <span class="ot">-&gt;</span> <span class="dt">Just</span> _</span></code></pre></div>
<p>Now we run <code>apply fab</code>. Because <code>Nothing</code> doesn’t take any arguments, it didn’t produce any holes, so we need look only at the <code>Just</code> case:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> <span class="kw">case</span> ma <span class="kw">of</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>  <span class="dt">Just</span> a  <span class="ot">-&gt;</span> <span class="dt">Just</span> (fab _)</span></code></pre></div>
<p>and finally we run <code>assumption</code> to fill in the hole:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> <span class="kw">case</span> ma <span class="kw">of</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a>  <span class="dt">Just</span> a  <span class="ot">-&gt;</span> <span class="dt">Just</span> (fab a)</span></code></pre></div>
<p>Look at that! Even though it would require significantly different editing commands to write the syntax of these two functor instances, they are both descried by the same composition of tactics. This is what I mean by “semantic editing,” we’re moving the algorithm for producing functor instances out of our heads and reifying it into something the computer understands. In essence, by writing <code>fmap</code> once, we can teach the computer how to write it for us in the future.</p>
<p>I mentioned earlier that <code>split</code> gives us some issues here. Reading closely, you’ll notice that there is nothing in our tactics that say we need to <code>split</code> the same data constructor that we just <code>destruct</code>ed. In actuality there are four different, valid programs that can be produced by the above set of tactics:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> <span class="kw">case</span> ma <span class="kw">of</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>  <span class="dt">Just</span> a  <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> <span class="kw">case</span> ma <span class="kw">of</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a>  <span class="dt">Just</span> a  <span class="ot">-&gt;</span> <span class="dt">Just</span> (fab a)</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true"></a></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> <span class="kw">case</span> ma <span class="kw">of</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true"></a>  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Just</span> (fab a)</span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true"></a>  <span class="dt">Just</span> a  <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true"></a></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> <span class="kw">case</span> ma <span class="kw">of</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true"></a>  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Just</span> (fab a)</span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true"></a>  <span class="dt">Just</span> a  <span class="ot">-&gt;</span> <span class="dt">Just</span> (fab a)</span></code></pre></div>
<p>Choosing the “best” implementation of these possibilities is largely a matter of heuristics, which I plan to describe in a later post. For now, let’s just assume our tactics engine is smart enough to come up with the one you had in mind.</p>
<p>Of course, the real issue here is that nothing forces our <code>destruct</code> and <code>split</code> tactics to use the same data constructor. We can eliminate this ambiguity by noticing that in <code>fmap</code>, we’re not actually trying to destruct and then split, but instead we’re trying to implement a homomorphism (a structure-preserving function.) In order to preserve structure, we’d better map a data constructor to itself. So instead, let’s use the <code>homo</code> tactic instead of <code>destruct</code> and <code>split</code>. Our new tactics metaprogram for writing functor instances is thus:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a>intros</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>homo ida</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a>apply fab</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>assumption</span></code></pre></div>
<p>This new version now can no longer generate any of the pathological <code>fmap</code> implementations for <code>Maybe</code>, as they are not structure preserving. We’re left only with the good implementation. Let’s do one more derivation, this time for <code>Either c a</code>. After <code>intros</code> and <code>homo eca</code>, we’re left with:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Either</span> c a <span class="ot">-&gt;</span> <span class="dt">Either</span> c b</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> <span class="kw">case</span> eca <span class="kw">of</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>  <span class="dt">Left</span>  c <span class="ot">-&gt;</span> <span class="dt">Left</span> _</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a>  <span class="dt">Right</span> a <span class="ot">-&gt;</span> <span class="dt">Right</span> _</span></code></pre></div>
<p>For the first time, we’re now left with <em>two</em> holes. The default behavior is for a tactic to apply to all holes (although there are combinators for “zipping” holes), meaning that the <code>apply fab</code> tactic will be run on both holes. For the <code>Left</code> case, our hole has type <code>c</code>, but <code>fab _</code> has type <code>b</code>, so this tactic <em>fails to apply here.</em> Tactic failure is per-hole, so we can still apply it to the other hole, resulting in:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Either</span> c a <span class="ot">-&gt;</span> <span class="dt">Either</span> c b</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> <span class="kw">case</span> eca <span class="kw">of</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a>  <span class="dt">Left</span>  c <span class="ot">-&gt;</span> <span class="dt">Left</span> _</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a>  <span class="dt">Right</span> a <span class="ot">-&gt;</span> <span class="dt">Right</span> (fab _)</span></code></pre></div>
<p>And finally, <code>assumption</code> fills the hole with whatever would typecheck. In the first hole that’s <code>c</code>, and in the second it’s <code>a</code> as before.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a><span class="fu">fmap</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Either</span> c a <span class="ot">-&gt;</span> <span class="dt">Either</span> c b</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a><span class="fu">fmap</span> <span class="ot">=</span> \fab ma <span class="ot">-&gt;</span> <span class="kw">case</span> eca <span class="kw">of</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a>  <span class="dt">Left</span>  c <span class="ot">-&gt;</span> <span class="dt">Left</span> c</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>  <span class="dt">Right</span> a <span class="ot">-&gt;</span> <span class="dt">Right</span> (fab a)</span></code></pre></div>
<p>Amazing! Three different functor implementations, with different numbers of data constructors, type variables, and cardinalities. By programming at the level of tactics rather than bytes, we can ignore the superficial differences between these implementations, focusing instead on the fact that they’re all derived the same way.</p>
<p>Hopefully this post has given you some insight into what tactics are and why they’re valuable. In the next post we’ll look at how this stuff is implemented behind the scenes, and the difficulties we’ve had integrating it into the language server. Stay tuned!</p>
        ]]>
      </content>
    </entry>
    <entry>
      <title>Algebra-Driven Design</title>
      <id>blog/algebra-driven-design/index.html</id>
      <link href='blog/algebra-driven-design/index.html'/>
      <published>2020-09-10T16:55:00Z</published>
      <updated>2020-09-10T16:55:00Z</updated>

      <content type="html">
        <![CDATA[
        <p>After almost a year of work, I’m <em>thrilled</em> to announce the completion my new book, <a href="https://algebradriven.design">Algebra-Driven Design</a>. It’s the culmination of two rewrites, and comes with a beautiful foreword written by John Hughes, the inventor of QuickCheck.</p>
<p>In the book, we take a fundamentally different approach to the software design process, focusing on deriving libraries from equations, algebraic manipulation and well-studied mathematical objects. The resulting code is guaranteed to be free of abstraction leaks, and in many cases, actually writes itself.</p>
<p>If that sounds like the sort of software you’d like to write, I’d highly encourage you to <a href="https://algebradriven.design">give it a read</a>.</p>
<center>
<a href="https://algebradriven.design"><img src="/images/add.png" alt="Algebra-Driven Design"></a>
</center>
        ]]>
      </content>
    </entry>
    <entry>
      <title>Polysemy: Mea Culpa</title>
      <id>blog/mea-culpa/index.html</id>
      <link href='blog/mea-culpa/index.html'/>
      <published>2020-06-14T22:36:00Z</published>
      <updated>2020-06-14T22:36:00Z</updated>

      <content type="html">
        <![CDATA[
        <p><a href="https://lexi-lambda.github.io/">Alexis King</a> gave an <a href="https://www.youtube.com/watch?v=0jI-AlWEwYI">utterly fantastic talk</a> today on the deep inner workings of Haskell programs’ performance profiles. It’s really very excellent and you should go watch it if you haven’t already. I’ve been extremely <a href="https://sandymaguire.me/blog/burnout/">burned out</a> on Polysemy and effect-system-related topics lately, but it seems like as good a time as any to discuss what’s going on with the library. Why do Alexis’ benchmarks clearly show something other than my claim that Polysemy was “zero cost?” In short:</p>
<p>I screwed up.</p>
<p>The core Haskell that’s being run in Alexis’ benchmark probably looks <a href="https://gist.github.com/isovector/e4832512ec9c73bff94432a7a58470f9#file-t16473-dump-simpl">like this</a>, though at one point I did indeed get the countdown benchmark to completely <a href="https://gist.github.com/isovector/e4832512ec9c73bff94432a7a58470f9#gistcomment-2883147">optimize away.</a> My claim to being zero-cost was based on this result, which was possible, but required <a href="https://gitlab.haskell.org/ghc/ghc/merge_requests/668">patching GHC</a>, enabling <code>-flate-specialise -O2 -fstatic-argument-transformation -fmax-simplifier-iterations=10</code> as well as a <a href="https://gist.github.com/isovector/e4832512ec9c73bff94432a7a58470f9#gistcomment-2872671">GHC patch cajoling the optimizer into running extra hard.</a></p>
<p>My patch to GHC just barely missed the 8.8 deadline, which meant it wouldn’t be publicly available until GHC 8.10, roughly a year away. And until then, Polysemy had no chance of being fast.</p>
<p>The result of all this: fast code, relying on a house of cards of optimization, only on a compiler that didn’t exist yet. It worked, but was a huge hassle to test, and because of that, I didn’t do it very often, nor did I make it easy for others to verify my claims.</p>
<p>My mindset has always been that the “free monads are too slow” argument is overblown and irrelevant to 99% of programs, and my original goal with Polysemy was to show that there was nothing fundamentally wrong with the approach; that if we tried hard enough, we really could pull amazing performance out of free monads.</p>
<p>It’s been about a year now, so my recollection is hazy, but I think I must have somehow conflated “fast programs are possible in Polysemy” with “Polysemy is zero-cost.” There was absolutely no deception intended, but it appears I deceived myself, and the community because of that. I’m sorry.</p>
<p>Sometime near the end of 2019, Lexi showed me her research into why the effect system benchmarks were extremely misleading (as mentioned in her talk.) Her research made it very evident that all effect systems were “cheating” in the benchmark shootout, and I attributed Polysemy’s pre-super-optimized terrible benchmark numbers to “not cheating as much.” If the optimizer was what was making other effect systems fast, but only in single-module programs, presumably they would also perform badly in real-world, multiple-module programs, and would see the same performance characteristics as Polysemy. I didn’t confirm this experimentally.</p>
<p>Plus, I figured, if performance <em>truly is</em> a problem, and not the overactive fear I thought it was, surely someone would have filed a bug complaining that Polysemy wasn’t as fast as it claimed. To date, nobody has filed that bug, and I continue to believe it’s an overblown issue — though that isn’t to say we shouldn’t fix it if we can. Lexi’s package <a href="https://github.com/hasura/eff">eff</a> seems to be working towards that solution, and I applaud her for all of the work she’s been putting into this problem.</p>
<p>So that’s more or less the story. But there are a few loose ends; such as why Lexi and I are seeing different benchmarking results. I realize this doesn’t actually matter, and I agree with her that Polysemy <em>is in fact slow.</em> That being said, I feel like enough of my reputation is on the line that I’d like to put towards some more evidence that I didn’t fabricate the whole thing. Also, the investigation will unearth some more systematic problems.</p>
<p>First and foremost, the last time I looked at the source of Lexi’s benchmarks, I noted that they don’t use <code>polysemy-plugin</code>, which <a href="https://github.com/polysemy-research/polysemy#stellar-engineering---aligning-the-stars-to-optimize-polysemy-away">the documentation states is necessary for the good performance</a>. I don’t remember where these benchmarks actually are, but it doesn’t matter, because even if she had enabled the plugin, Polysemy <em>would still not optimize away.</em></p>
<p>Why not? Polysemy’s performance was extremely reliant on unfolding of its recursive bind operation. As <a href="https://reasonablypolymorphic.com/blog/writing-custom-optimizations/#inlining-recursive-calls">described here</a>, you could trick GHC into unfolding a recursive call once by explicitly giving a loop-breaker. In essence, it required transforming the following recursive call:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ot">factorial ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>factorial <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>factorial n <span class="ot">=</span> n <span class="op">*</span> factorial (n <span class="op">-</span> <span class="dv">1</span>)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="ot">{-# INLINE factorial #-}</span></span></code></pre></div>
<p>Into this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">factorial ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>factorial <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>factorial n <span class="ot">=</span> n <span class="op">*</span> factorial&#39; (n <span class="op">-</span> <span class="dv">1</span>)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="ot">{-# INLINE factorial #-}</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="ot">factorial&#39; ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>factorial&#39; <span class="ot">=</span> factorial</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="ot">{-# NOINLINE factorial&#39; #-}</span></span></code></pre></div>
<p>For whatever reason, this trick exposes enough of Polysemy’s bind so that the simplifier could inline away the expensive bits. But this was tedious! Every recursive call needed an explicit loop-breaker, and missing one would silently jeopardize your performance! Doing this by hand seemed antithetical to Polysemy’s other goal of no-boilerplate, and so at some point we factored out this logic into a GHC plugin, and then <a href="https://github.com/polysemy-research/polysemy/commit/8bbd9dc7d6ff1d55c9f8ea5f7f160ecf337d0e6e#diff-a6a5069006aaf9c213df8bfcf538bda8">removed our hand-written loop-breakers.</a>. The initial implementation of that plugin is described <a href="https://reasonablypolymorphic.com/blog/writing-custom-optimizations/">in this blog post</a>.</p>
<p>In retrospect, this explicit breaking-of-loops doesn’t seem to be required in the benchmark — only in Polysemy — but that escaped my attention at the time and believing that user-code required this optimization was the main motivation in turning it into a GHC plugin. Anyway…</p>
<p>As it turns out, this plugin <em>didn’t actually work!</em> It was successfully rewriting the core into the explicitly loop-broken version, but for whatever reason, <a href="https://github.com/polysemy-research/polysemy/pull/90#issuecomment-500090395">the simplifier wasn’t picking up where we left off.</a> To this day I don’t know why it doesn’t work, but it doesn’t. Instead we proposed to implement this plugin as a renamer pass, but that presents serious implementation problems. Since there was no way in hell Polysemy could possibly be fast before GHC 8.10 (to be released roughly a year in the future) motivation to find a solution to this problem was understandably low, and it fell by the wayside. It has never been fixed, and remains disabled and half-worked around in Polysemy to this day.</p>
<p>Hopefully this is the only reason why Polysemy doesn’t show the excellent (though, admittedly unrepresentative) countdown benchmark results I claimed it did. I’m not invested enough to check for myself, but if you’re interested, I suspect you’ll see excellent core produced by <a href="https://gist.github.com/isovector/e4832512ec9c73bff94432a7a58470f9#gistcomment-2883144">my single-file repro</a> if you compile it on GHC 8.10 under <code>-O2</code> with the <code>polysemy-plugin</code> and the above flags enabled. If so, I suspect rolling back <a href="https://github.com/polysemy-research/polysemy/commit/8bbd9dc7d6ff1d55c9f8ea5f7f160ecf337d0e6e">#8bbd9dc</a> would get the real Polysemy library also doing well on the benchmark. But again, <em>the benchmark performance is meaningless!</em></p>
<hr />
<p>Enough history for today. Before ending this post, I’d like to do a tiny <a href="https://www.hillelwayne.com/post/stamping-on-eventstream/">STAMP</a> on what went wrong, in the hope that we can all learn something. The goal here is not to pass the buck, but to get a sense of just how much went wrong, how, and why.</p>
<p>By my analysis, the following issues all contributed to Polysemy’s colossal failure:</p>
<ul>
<li>Haskell’s performance is not well understood
<ul>
<li>The effect system benchmarks were meaningless, and if anyone knew that, it was not common knowledge.</li>
<li>MTL is widely believed to be more performant than it is.</li>
<li>Existing effect systems’ performance is tied largely to GHC’s optimizer firing.</li>
<li>Because of lack of understanding, I was tackling bad-performance symptoms rather than causes.</li>
</ul></li>
<li>Polysemy’s performance was unreliable
<ul>
<li>Required several interlocking pieces to work: a patched compiler, a core plugin, explicit loop-breakers, obscure GHC options.</li>
<li>Because the performance was hard to test, we didn’t notice when these pieces didn’t work.
<ul>
<li>Upon noticing the loop-breaking plugin didn’t work, it was unclear how to fix it.
<ul>
<li>Because of requiring a patched GHC, it was not a priority to fix.
<ul>
<li>Not being a priority meant it wasn’t motivating, and so it didn’t get done.</li>
</ul></li>
</ul></li>
</ul></li>
<li>Debugging the simplifier is hard work. I was looking at thousands of lines of generated core by eye. <a href="https://github.com/yav/dump-core">Tooling exists</a>, but it is more helpful for navigating core than diffing it.</li>
</ul></li>
<li>Polysemy’s performance was too hard to test.
<ul>
<li>I missed the GHC deadline
<ul>
<li>My patch lingered for weeks in a finished state
<ul>
<li>Only reviewable by one person, who was on vacation.</li>
<li>Stuck doing drive-by improvements that were only suggestions, and not blockers to being merged. This was not made clear to me.</li>
<li>The simplifier is really hairy. It’s under-documented, and the function I was touching was over 150 lines of code.</li>
</ul></li>
</ul></li>
<li>I use Stack for my development, Stack doesn’t easily support custom-built GHCs. Therefore I couldn’t use my usual tools to test.</li>
<li>I don’t know how to use cabal
<ul>
<li>The documentation is notoriously lacking. As best I can tell, there are no “quick start” tutorials, and the relevant parts of the user manual are mentioned only under a heading that mentions “Nix”.</li>
</ul></li>
<li>Because of the above two points, I only tested on the single module, and never on the library itself.</li>
</ul></li>
<li>I had too much ego in the project.
<ul>
<li>I wanted to believe I had accomplished something “impossible.”</li>
<li>I had invested several engineering-months of my time working on this problem.</li>
<li>I had invested a large chunk of my reputation into free monads.</li>
</ul></li>
</ul>
<p>This post is long enough without diving into those points in more detail, but I’m happy to expand on individual points. Let me know in the comments if you’re interested.</p>
<p>All in all, this is has been the embarrassing affair. But then again, <em>if you haven’t failed in recent memory, you’re not trying hard enough.</em> I’ll strive to do better in the future.</p>
        ]]>
      </content>
    </entry>
    <entry>
      <title>A Working Linux DAW</title>
      <id>blog/linux-daw/index.html</id>
      <link href='blog/linux-daw/index.html'/>
      <published>2020-02-13T00:30:00Z</published>
      <updated>2020-02-13T00:30:00Z</updated>

      <content type="html">
        <![CDATA[
        <p>I’ve recently been watching <a href="https://www.youtube.com/channel/UCMHG0rJtVF1LohiP63FJakw">Guy Michelmore’s youtube videos on composing music</a>. “That looks pretty easy” I thought to myself, which led to accidentally buying a <a href="https://www.native-instruments.com/en/products/komplete/keyboards/komplete-kontrol-m32/">Native Instruments M32</a> and attempting to compose music for myself.</p>
<p>As it happens, writing music is much harder than I gave it credit for. But an overwhelming amount of that difficulty is for bullshit reasons. You see, for whatever reason, the world of digital music production is a world awash in stupid <a href="https://i0.wp.com/www.macosaudio.com/wp-content/uploads/2018/06/Klevgrand-DAW-LP.jpg?resize=700%2C349&amp;ssl=1">dial UIs</a> and proprietary software.</p>
<p>When I say proprietary software, I don’t just mean the mixing software itself. I also mean all of the drivers for the peripherals. I also also mean all of the digital instruments. Extremely frustratingly, I also also <em>also</em> mean even the software to <em>download this stuff.</em> EVEN THOUGH IT’S ALL JUST OVER HTTP ANYWAY!</p>
<p>Anyway, I thought I should probably write down the things I’ve learned to hopefully help keep future linux musicians sane.</p>
<h2 id="digital-audio-workstation-daw">Digital Audio Workstation (DAW)</h2>
<p><strong>Go with <a href="">REAPER DAW</a>.</strong></p>
<p>I started with LMMS because a quick search for “linux daw” suggested I use it. After a few days of learning it, this turned out to be a bad idea. The UI is frustrating, and instrument plugins don’t work very well.</p>
<p>REAPER, on the other hand, feels really good. Once you get it working. I had a few issues getting sound working. I had to choose the “ALSA” backend, and turn off the “auto-disable PulseAudio” setting. Unfortunately the PulseAudio backend was introducing ~200ms of latency between hitting notes and hearing them. <strong>Try using the ALSA backend if you are experiencing sound latency.</strong></p>
<p>You can use the <code>ReaSynth</code> virtual instrument to try testing your audio.</p>
<h2 id="audio-plugins-vsts">Audio Plugins (VSTs)</h2>
<p>Out of the box, REAPER is pretty shit. It doesn’t come with anything good, and so we’ll need to add some before we can get to making music. There are lots of great VSTs out there, but almost all of them are Windows-only. But fear not!</p>
<p>If you install <a href="https://wiki.winehq.org/Wine-Staging">wine-staging</a>, you can use it to download some good, free instruments from <a href="https://www.spitfireaudio.com/labs/">Spitfire LABS</a>. You’ll need to sign up for an account, install the (ahem) propriety software, and then press the “GET” button on the LABS website. That… somehow authorizes your account, and then the proprietary software will let you download your files.</p>
<p>Particularly resourceful readers can also probably find copies of <a href="https://www.native-instruments.com/en/products/komplete/synths/massive/">Massive</a> and <a href="https://www.native-instruments.com/en/products/komplete/samplers/kontakt-6/">Kontakt</a> too.</p>
<p><strong>Make sure you get the 32bit Windows editions of any VSTs you find.</strong></p>
<p>Now, none of these VSTs actually work in REAPER, but thankfully, <strong>there’s a program called <a href="https://github.com/psycha0s/airwave">Airwave</a> that can convert Windows VSTs into Linux ones.</strong> Move your 32bit VST .dlls into <code>~/.wine/drive_c</code>, then ask Airwave to install them into <code>~/.vst</code> for you. Make sure this is the VST path for REAPER.</p>
<p>Back in REAPER, press <code>CTRL+P</code> and then <code>Plugins &gt; VST</code>. Make sure the VST plugin path says <code>~/.vst</code>, and then hit the <strong>Re-scan</strong> button. If you’re lucky, you should now be able to right-click in the main window and click “Insert virtual instrument on new track” and find your new VSTs under <code>All Plugins &gt; New</code>.</p>
<h2 id="midi-controller">MIDI Controller</h2>
<p>My M32 keyboard worked out of the box, sorta. The keys play keys in REAPER, and the dials are successfully recognized as inputs. But none of the useful “DAW control” buttons work. More proprietary software, hidden behind enough bullshit that I couldn’t even find it to test if it worked under wine.</p>
<p><strong>I would not recommend the NI M32 due to the amount of bullshit their lack of Linux support put me through.</strong></p>
<p>But if you’re stuck with one… I decided to <a href="https://github.com/isovector/free-m32">reverse engineer the protocol and write a little driver</a>. This program requires <code>xdotool</code>, and maps button presses on the M32 into keypresses. At time of writing, it just types regular English characters — unfortunate because they’re likely to conflict with other bindings, but REAPER doesn’t recognize most linux keysyms. Also, it only intermittently recognizes high-ASCII characters. What a piece of shit. I spent four hours today fighting with this.</p>
<hr />
<p>This is the critical path I took from not knowing anything about music production to having a mostly-working setup. Knowing what I do now, it would only take 30 minutes to setup, but this blog post is the culmination of about a week of pain! Not all of it was bad though — I got to learn a lot about reverse engineering, and expect a blog post on that in the near future!</p>
        ]]>
      </content>
    </entry>
    <entry>
      <title>Low-Tech AST Extensibility with Extension Patterns</title>
      <id>blog/extension-patterns/index.html</id>
      <link href='blog/extension-patterns/index.html'/>
      <published>2019-11-27T22:15:00Z</published>
      <updated>2019-11-27T22:15:00Z</updated>

      <content type="html">
        <![CDATA[
        <p>Today I want to share a common pattern I’ve been using for extending AST-like data structures that I don’t own. It’s an extremely low-tech solution to the problem (as opposed to something like the dreaded <a href="https://www.microsoft.com/en-us/research/uploads/prod/2016/11/trees-that-grow.pdf">Trees That Grow</a>, which is more far complicated than any problem is worth.)</p>
<p>A common problem I run into is wanting to add custom annotations to abstract syntax trees. As one example, a while back I was writing a Haskell editor that would <em>write Haskell code for you.</em> The idea was to get rid of the text representation of code entirely, and work directly with the Haskell AST. However, it’s often useful to insert metadata into the AST — for example, which bit of the tree you’re currently editing.</p>
<p>As another example, I’m currently writing a book in markdown, and want to express high-level concepts that markdown doesn’t have any primitives for — things like <em>exercises</em> or <em>inline this snippet of code from a real codebase</em> or <em>this thing is like a footnote, but should have a special graphic.</em> If I were a pleb, I’d just manually write the low-level markdown necessary to achieve the visual goal I want.</p>
<p>But: two problems. Firstly, I did that on the last book, and it turned out to be the biggest mistake I’ve made in quite a long time. The issue is that while this works for the representation you’re currently looking at, it all falls apart when you want to change the representation. My book looked great as a PDF, but it took me weeks and literal tears to turn that thing into an e-book.</p>
<p>Secondly, this book I’m writing is <em>all about</em> how the root of all evil is a premature loss of precision — which is to say, it’s about designing and using abstractions. The irony would be too salty if I didn’t take my own advice here and build my book out of the abstractions I claim are so valuable.</p>
<p>So this is the question: how can we add new abstraction primitives to a datatype that we don’t control?</p>
<p>Let’s take a particular example that I implemented today. In <a href="http://journal.stuffwithstuff.com/2015/09/08/the-hardest-program-ive-ever-written/">The Hardest Program I’ve Ever Written</a>, Bob Nystrom walks through the implementation of an interesting program. Throughout the prose, there are little skulls which are footnotes describing a wrong path he took during the implementation. These mistakes are, in my opinion, more interesting than the essay itself.</p>
<p>My book has a few case studies in which I work through building a real program using the techniques I’m advocating. The idea is to give readers an actual taste of how it works in practice, and to show that often times the journey is more valuable than the destination. As such, I thought Bob’s skull footnotes would make an excellent addition to these chapters.</p>
<p>I dug in to see how Bob had implement his, and I was amazed! <a href="https://raw.githubusercontent.com/munificent/journal/master/_posts/2015-09-08-the-hardest-program-ive-ever-written.md">The poor bastard had done it all by hand!</a> My god, if that’s not commitment, I don’t know what is. There are like seventeen footnotes in that blog post. Someone should probably make Bob a saint for just how how patient he must be.</p>
<p>While this is commendable, it is antithetical to our purposes. This is clearly an abstraction leak; markdown is supposed to be human-readable format that eschews 15th-century technology like HTML. As soon as you have an abstraction leak, your abstraction is worth nothing. At this point it will only bring you pain.</p>
<p>But what can we do instead?</p>
<p>Well, my book is being authored in markdown, and then processed via <a href="https://pandoc.org/">pandoc</a> to turn it into pretty PDFs. I’ve separated the semantic bits from the presentation bits, in an act of forward thinking for when I make an e-book copy. What this means is that, <em>even though I’m writing markdown,</em> my book is actually a Pandoc document. Which is to say, there is a <a href="https://hackage.haskell.org/package/pandoc-types-1.17.6.1/docs/Text-Pandoc-Definition.html#t:Block">Text.Pandoc.Definition.Block</a> somewhere in the platonic realm that describes my book.</p>
<p>And so we return to the question of how to annotate ASTs. The <a href="https://hackage.haskell.org/package/pandoc-types-1.17.6.1/docs/Text-Pandoc-Definition.html#t:Block">Pandoc AST</a> is a rather expressive format, but it primarily describes basic typographic elements. It primarily captures meaning as to how to layout a document, rather than capturing the meaning of <em>what is being expressed.</em></p>
<p>While Pandoc already has the option to <a href="https://hackage.haskell.org/package/pandoc-types-1.17.6.1/docs/Text-Pandoc-Definition.html#t:Inline">annotate a Footnote</a>, I don’t want to replace all footnotes with deathnotes (as I’ve taken to calling these little skull things.)</p>
<p>The trick is a rather stupid one. While usual footnotes are written in markdown like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>This is some prose<span class="ot">[^1]</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="ot">[^1]: </span>This is a footnote.</span></code></pre></div>
<p>I’ve decided to annotate my deathnotes like this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>This is some prose<span class="ot">[^1]</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="ot">[^1]: </span>death This is a deathnote.</span></code></pre></div>
<p>The only difference is that the text of a deathnote starts with the word <code>death</code>. That’s it. There is nothing clever going on here. When parsed into a <code>Block</code>, the above has this structure:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="dt">Para</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>  [ <span class="dt">Str</span> <span class="st">&quot;This&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>  , <span class="dt">Space</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>  , <span class="dt">Str</span> <span class="st">&quot;is&quot;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>  , <span class="dt">Space</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>  , <span class="dt">Str</span> <span class="st">&quot;some&quot;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>  , <span class="dt">Space</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>  , <span class="dt">Str</span> <span class="st">&quot;prose&quot;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>  , <span class="dt">Note</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>    [ <span class="dt">Para</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>      [ <span class="dt">Str</span> <span class="st">&quot;death&quot;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>      , <span class="dt">Space</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>      , <span class="dt">Str</span> <span class="st">&quot;This&quot;</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>      , <span class="dt">Space</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a>      , <span class="dt">Str</span> <span class="st">&quot;is&quot;</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a>      , <span class="dt">Space</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a>      , <span class="dt">Str</span> <span class="st">&quot;a&quot;</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true"></a>      , <span class="dt">Space</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true"></a>      , <span class="dt">Str</span> <span class="st">&quot;deathnote.&quot;</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true"></a>      ]</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true"></a>    ]</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true"></a>  ]</span></code></pre></div>
<p>The bit of interest to us is the part of the AST that begins <code>Note [ Para [ Str "death"</code>. Because this is an easy thing to annotate directly in markdown, and because it won’t happen by accident, we can decide that this is the canonical representation for annotating a deathnote.</p>
<p>Here’s the trick: we can reify that decision in Haskell via a pattern synonym. If you’re unfamiliar with pattern synonyms, they allow you to “create” “new” data constructors, which are just synonyms for arbitrary patterns you’d like to pick out. In our case, we want to pick out that <code>Note [ Para [ Str "death"</code> structure.</p>
<p>We begin by writing a little function that will pattern match on the part we want, and remove the word <code>"death"</code> from the first paragraph.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ot">splitDeathNote ::</span> [<span class="dt">Block</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Block</span>]</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>splitDeathNote (<span class="dt">Para</span> (<span class="dt">Str</span> <span class="st">&quot;death&quot;</span> <span class="op">:</span> ps) <span class="op">:</span> bs)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>  <span class="ot">=</span> <span class="dt">Just</span> (<span class="dt">Para</span> (<span class="fu">dropWhile</span> (<span class="op">==</span> <span class="dt">Space</span>) ps) <span class="op">:</span> bs)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>splitDeathNote _ <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>The function <code>splitDeathNote</code> will try to match our deathnote pattern, and if it succeeds, give back the rest of the content. As a second step, we enable <code>-XViewPatterns</code> and <code>-XPatternSynonyms</code> and write a pattern:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">pattern</span> <span class="dt">DeathNote</span><span class="ot"> ::</span> [<span class="dt">Block</span>] <span class="ot">-&gt;</span> <span class="dt">Inline</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="kw">pattern</span> <span class="dt">DeathNote</span> bs <span class="ot">&lt;-</span> <span class="dt">Note</span> (splitDeathNote <span class="ot">-&gt;</span> <span class="dt">Just</span> bs)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    <span class="dt">DeathNote</span> (<span class="dt">Para</span> ps <span class="op">:</span> bs) <span class="ot">=</span> <span class="dt">Note</span> <span class="op">$</span> <span class="dt">Para</span> (<span class="dt">Str</span> <span class="st">&quot;death&quot;</span> <span class="op">:</span> <span class="dt">Space</span> <span class="op">:</span> ps) <span class="op">:</span> bs</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>    <span class="dt">DeathNote</span> bs             <span class="ot">=</span> <span class="dt">Note</span> <span class="op">$</span> <span class="dt">Para</span> [<span class="dt">Str</span> <span class="st">&quot;death&quot;</span>] <span class="op">:</span> bs</span></code></pre></div>
<p>Patterns have egregious syntax, but it can be read in two parts. The first bit is the <code>pattern DeathNote bs &lt;- Note ...</code> bit, which is used for defining a <em>pattern match.</em> It says, “if you do a pattern match on the thing left of the <code>&lt;-</code>, instead replace it with the pattern match on the right. This weird <code>-&gt;</code> thing is a <em>view pattern,</em> which says”run the <code>splitDeathNote</code> function, and only match if it returns a <code>Just</code>."</p>
<p>The other part of the pattern synonym, the part after the <code>where</code>, allows us to <em>build an <code>Inline</code> out of a <a href="https://hackage.haskell.org/package/pandoc-types-1.17.6.1/docs/Text-Pandoc-Definition.html#t:Block">Block</a>.</em> Which is to say, it works like a data constructor; we can write something like <code>let foo = DeathNote blah</code>.</p>
<p>In other words, after defining the <code>DeathNote</code> pattern synonym, for all intents and purposes it’s like we’ve added a new data constructor to the pandoc <code>Inline</code> type. For example, we can write a function that pattern matches on it:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ot">isDeathNote ::</span> <span class="dt">Inline</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>isDeathNote (<span class="dt">DeathNote</span> _) <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>isDeathNote _ <span class="ot">=</span> <span class="dt">False</span></span></code></pre></div>
<p>GHC will happily compile this thing, and it will work as expected! Cool!</p>
<p>The final step to actually getting these things working is to walk the pandoc AST, and transform our nice, newly-annotated deathnotes into something more amenable for a PDF. But! We want to do this <em>as part of generating a PDF.</em> That way we hold onto our semantic annotations until the <em>very last moment,</em> i.e., when we send our document to the printers.</p>
<p>We can get this transformation for free via <a href="https://www.stackage.org/lts-14.16/package/syb-0.7.1">Scrap Your Boilerplate</a>(SYB for short.) SYB lets us write tiny transformations that operate only on a piece of data that we care about, and then lift that into a leaf-first transformation over arbitrarily large data structures.</p>
<p>In our case, we can write a function like this:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">renderDeathNoteForLatex ::</span> <span class="dt">Inline</span> <span class="ot">-&gt;</span> <span class="dt">Inline</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>renderDeathNoteForLatex (<span class="dt">DeathNote</span> bs) <span class="ot">=</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>  <span class="dt">RawInline</span> <span class="st">&quot;latex&quot;</span> <span class="op">$</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>    <span class="fu">mconcat</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>      [ <span class="st">&quot;\\deathnote{&quot;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>      , <span class="fu">show</span> bs  <span class="co">-- the real implementation doesn&#39;t use show</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>      , <span class="st">&quot;}&quot;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>      ]</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>renderDeathNoteForLatex x <span class="ot">=</span> x  <span class="co">-- just id for all other nodes</span></span></code></pre></div>
<p>And then use SYB to lift it over the entire <code>Pandoc</code> structure</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="ot">latexPreProcess ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>latexPreProcess <span class="ot">=</span> everywhere (mkT renderDeathNoteForLatex)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>  <span class="co">-- we can potentially run other transformations here at the same time</span></span></code></pre></div>
<p>And just like that, we’ve added a custom annotation to markdown, and separately given a presentation strategy for it. We can use <a href="http://hackage.haskell.org/package/pandoc-types-1.20/docs/Text-Pandoc-JSON.html#v:toJSONFilter"><code>toJSONFilter</code></a> to connect our little <code>latePreProcess</code> transformation to <code>pandoc</code>, and no one is any the wiser.</p>
        ]]>
      </content>
    </entry>
    <entry>
      <title>Haskell2020 Is Dead, but All Hope Is Not Lost</title>
      <id>blog/haskell202x/index.html</id>
      <link href='blog/haskell202x/index.html'/>
      <published>2019-11-01T10:39:00Z</published>
      <updated>2019-11-01T10:39:00Z</updated>

      <content type="html">
        <![CDATA[
        <p>Haskell2020 is the long-awaited sequel to Haskell2010 — a formal, prescriptive standard of the Haskell language, that all implementations should adhere to. Today we have two previous standards, Haskell2010 and Haskell98, but neither is particularly in-line with the language as it’s written in this day and age. The aim of Haskell2020 is to bring these older standards in line with the way the language is actually practiced.</p>
<p>Today, there is only one real implementation of Haskell: the Glasgow Haskell Compiler (GHC). GHC is a Haskell2010-compliant compiler, but extends Haskell via <em>language extensions</em> — explicitly opt-in features that deviate from the standard. In GHC 8.6.5, there are 125 different language extensions, and <a href="https://gist.github.com/atondwal/ee869b951b5cf9b6653f7deda0b7dbd8">an analysis</a> shows that 10% of Haskell files in the wild enable 10 or more extensions.</p>
<p>All of this is to say that a good chunk of the Haskell being written in the real world <em>is not Haskell2010 compatible.</em> And the situation is only going to get worse.</p>
<p>It might not be immediately evident to you why this is a bad thing. As excellent a piece of software as GHC is, tying our language to a single implementation is unwise and shortsighted. As long as Haskell is defined implicitly by its implementation in GHC, no other implementation has a chance — they will always be forever playing catch-up.</p>
<p>C++ was in a similar situation in the early naughties; the de facto C++ compiler GCC was the only heavy-hitter in town. While it got the job done, it had some pretty terrible ergonomics — so bad that it spun up a cottage industry of attempting to <a href="https://codegolf.stackexchange.com/questions/1956/generate-the-longest-error-message-in-c">generate the worst error messages</a>. In 2007, Clang — an alternative industrial-strength compiler — was released, which strove to be compatible with GCC, but also to dramatically improve the ergonomics. This friendly competition has spurred both projects to become significantly better.</p>
<p>And we have seen similar beneficial competition (albeit certainly less friendly) in the Haskell world. Five years ago, Cabal sort-of got the job done for building Haskell projects, but there was this thing called “Cabal Hell” that bit <em>everyone.</em> It got the job done if you knew how it worked, which all the developers did, but the pain was felt by everyone else. Then Stack was released, which elegantly solved Cabal Hell, and <em>just worked.</em> It wasn’t perfect, but my god was it an improvement on the state of the world. In recent memory, Cabal has seen unparalleled improvements in its usability, after languishing for <em>years</em> with respect to usability complaints.</p>
<p>My point? Competition is a good thing, not just for users, but for the health of the ecosystem at large. And by extension, we should look at the status quo of today’s Haskell world with suspicion. And getting a good, prescriptive specification of what Haskell <em>is</em> would go a long way towards alleviating this issue.</p>
<p>So why do I bring all of this up? It’s my impression that the current Haskell2020 efforts are dead in all but name. The <a href="https://mail.haskell.org/pipermail/haskell-prime/">official mailing list</a> didn’t see any activity for 12 of the last 24 months. Of the months that did see activity, several of their volumes are measured in <em>bytes.</em> At time of writing, the official Haskell2020 website’s certificates are expired, and have been for two weeks.</p>
<p>None of this is meant to demonize the standards committee. But for whatever reason, it’s pretty clear that Haskell2020 is not going to happen in its current incarnation. After all, 2020 is coming up pretty dang soon!</p>
<p>Forgive the melodrama, but I truly believe that this situation is an existential risk for our beloved language and community. There are already well-founded <a href="https://www.reddit.com/r/haskell/comments/dpr276/what_is_the_status_of_ghc_linear_types/f5yjg67/">murmurings of dissatisfaction</a>, and <em>lots</em> of complaints about the lack of good tooling (though regrettably I can’t find any links right now.)</p>
<p>So what’s the real problem here? As a complete outsider — reading between the lines of discussions I’ve had with a few of the Haskell2020 committee members — my guess is this: <strong>a lack of leadership.</strong> It’s not that the committee members don’t care, it’s that nobody cares <em>sufficiently</em> to overcome the momentum and push the thing through to completion. Furthermore, these people are busy with their own cool projects, and committee work is always a thankless job.</p>
<p>The good news: a lack of leadership is a <em>very easy problem to solve.</em> If you care about this problem, <strong>just take the reigns.</strong> That’s all there is to it. <em>Anyone can do it.</em> Yes, even you, gentle reader! Nobody needs to elevate you to a position of power. There’s no admissions process. You don’t need to be given any <em>authority</em> in order to take the lead here. This is a thing that everybody wants, but there’s a coordination problem, and the only reason it hasn’t been done yet is that nobody has done it.</p>
<p>If you want more assurance about that: as a member of the GHC Steering Committee, <strong>I will personally ratify any reasonable draft standard of Haskell 202x</strong> and vote in favor that GHC adheres to that standard. I have confirmation from at least two other members of the committee that they will also do so.</p>
<p>As a rough estimate, the effort involved in Haskel202x is about half a person-year. Most of that will be spent doing unsexy, administrative things like setting deadlines, cajoling the right people for opinions, and writing a big, boring document. Not a lot of fun, to be sure, but <em>very doable.</em> The only challenge here is to not lose motivation for six months.</p>
<p>Should you still have doubts, I’d like to give another example: the GHC Steering Committee. Despite some (fair) criticisms, all things considered, the Steering Committee is a pretty successful organization. But <em>literally the only reason</em> for that success is Joachim’s unyielding desire for it to succeed. Without his monthly emails reminding everyone of the work to be done, and who is responsible for what, the Committee would collapse in three months. Nobody gave Joachim this responsibility, he just took it and owned it. In my opinion, the entire Haskell community is deeply indebted to Joachim on this front.</p>
<p>If all of this sounds inspiring to you, I urge you to take up the mantle and <em>make this thing happen.</em> It’s the first step towards a much better Haskell world, and it’s an amazingly actionable one. You can help change the world for the better, and we will all be indebted to you when you pull it off.</p>
        ]]>
      </content>
    </entry>
    <entry>
      <title>New Book: Design and Interpretation of Haskell Programs</title>
      <id>blog/design-and-interpretation/index.html</id>
      <link href='blog/design-and-interpretation/index.html'/>
      <published>2019-10-13T14:14:00Z</published>
      <updated>2019-10-13T14:14:00Z</updated>

      <content type="html">
        <![CDATA[
        <p><a href="https://www.patreon.com/designandinterpretation">I’m writing a new book</a>, on how to write good, real-world Haskell applications! The announcement copy is below.</p>
<hr />
<p>Hi there! My name is Sandy Maguire — you might know me from my work on Polysemy and Thinking with Types.</p>
<p>One of purely functional programming’s greatest strengths is its powerful abstraction capabilities. We proudly exclaim that our functions are referentially transparent, and because of that, our bugs will always be shallow. And this is often true.</p>
<p>10x is often cited as the magic number beyond which technology is good enough to overcome network effects. I’m personally convinced that writing Haskell is 10x better than any other popular programming language I’ve tried. But if functional programming is so good, why hasn’t it yet taken over the world?</p>
<p>This is a very serious question. If we’re right about this, why haven’t we won?</p>
<p>Design and Interpretation of Haskell Programs is my answer to this question. Haskell hasn’t taken market share because we collectively don’t yet know how to write real applications with it. Abstraction is our language’s greatest strength, but all of our “best practices” evangelize doing everything directly in IO. Is it really any wonder that nonbelievers aren’t convinced when we show them an imperative C program that just happens to be compiled with GHC?</p>
<p>Instead of giving up, this book encourages us to take a heavy focus on designing leak-free abstractions, on building programs that can be reasoned about algebraically, and on completely separating business logic from interpretation details.</p>
<p>But I can’t do it all by myself. Writing a book is a hard, gruelling process, that’s made much easier by knowing that people care about the end result. If you’re a conscientious engineer, unhappy with the status-quo of large, unmaintainable, “production-grade” Haskell, then this book is for you. By pledging, you let me know that this book is worth writing. In addition, your early feedback will help make this book the best it can possibly be.</p>
<p>Not sure if this is the book for you? Take a look at the sample before committing to anything!</p>
<p>With your help, together we can tame software complexity and write codebases we’re proud of.</p>
<p>One love, Sandy</p>
        ]]>
      </content>
    </entry>
    <entry>
      <title>Nimic: A language about nothing</title>
      <id>blog/nimic/index.html</id>
      <link href='blog/nimic/index.html'/>
      <published>2019-07-15T13:44:00Z</published>
      <updated>2019-07-15T13:44:00Z</updated>

      <content type="html">
        <![CDATA[
        <p>If you haven’t heard, <a href="https://isovector.github.io/erdos/">I recently solicited couches to stay on</a>. The idea is to cruise around the globe, meeting cool programmers, and collaborating with them on whatever project they’re most excited about.</p>
<p>This weekend I spent time with the inimitable <a href="https://github.com/davidrusu">David Rusu</a>. The bar for my trip has been set extremely high; not only is David an amazing host, but we hashed out a particularly interesting project in a couple of days. We call it <a href="https://github.com/isovector/nimic">nimic</a>.</p>
<p>Nimic is a free-form macro language, without any real syntax, or operational semantics. We have a super bare bones parser that groups parenthetical expressions, and otherwise admits any tokens, separated by whitespace. The language will attempt to run each of its macros on the deepest, leftmost part of this grouping structure. If nothing matches, the program is stuck and we just leave it.</p>
<p>Therefore, hello world in nimic is just the stuck program:</p>
<pre><code>hello world</code></pre>
<p>which you have to admit is about as small as you can get it. The core language installs four built-in macros; the most interesting of which is <code>macro</code> — allowing you to define new macros. The syntax is <code>macro pattern rewrite</code>, which itself will be rewritten as the stuck term <code>defined</code>.</p>
<p>As a first program, we can use <code>macro</code> to rewrite the <code>defined</code> term:</p>
<pre><code>macro defined (nimic is weird)</code></pre>
<p>which will step to <code>defined</code> via the definition of <code>macro</code>, and then step to <code>nimic is weird</code> via the new <code>defined</code> rule. Here it gets stuck and does no more work.</p>
<p>You can use the special tokens <code>#foo</code> to perform pattern matching in a macro. These forms are available in the rewrite rule. For example,</p>
<pre><code>macro (nimic is #adjective) (nimic is very #adjective)</code></pre>
<p>will replace our <code>nimic is weird</code> term with <code>nimic is very weird</code>. You can bind as many subterms in a macro as you’d like.</p>
<p>Because nimic attempts to run all of its macros on the deepest, leftmost part of the tree it can, we can exploit this fact to create statements. Consider the program:</p>
<pre><code>(macro (#a ; #b) #b)
; ( (macro (what is happening?) magic)
  ; (what is happening?)
  )</code></pre>
<p>Here we’ve built a cons list of the form <code>(head ; tail)</code>. Our default evaluation order will dive into the leftmost leaf of this tree, and evaluate the <code>(macro (#a ; #b) #b)</code> term there, replacing it with <code>defined</code>. Our tree now looks like this:</p>
<pre><code>(defined
; ( (macro (what is happening?) magic)
  ; (what is happening?)
  )</code></pre>
<p>where our new <code>#a : #b</code> rule now matches, binding <code>#a</code> to <code>defined</code>, and <code>#b</code> to the tail of this cons cell. This rule will drop the <code>defined</code>, and give us the new tree:</p>
<pre><code>( (macro (what is happening?) magic)
; (what is happening?)
)</code></pre>
<p>whereby we now can match on the leftmost macro again. After a few more steps, our program gets stuck with the term <code>magic</code>. We’ve defined sequential evaluation!</p>
<p>But writing cons cells by hand is tedious. This brings us to the second of our built-in macros, which is <code>rassoc #prec #symbol</code>. The evaluation of this will also result in <code>defined</code>, but modifies the parser so that it will make <code>#symbol</code> be right-associative with precedence <code>#prec</code>. As a result, we can use <code>rassoc 1 ;</code> to modify the parser in order to turn <code>a ; b ; c</code> into <code>a ; (b ; (c))</code>.</p>
<p>Therefore, the following program will correctly get stuck on the term <code>finished</code>:</p>
<pre><code>(macro (#a ; #b) #b)
; ((rassoc 1 ;)
;
( this is now
; parsed correctly as a cons cell
; finished
)))</code></pre>
<p>The final primitive macro defined in <code>nimic</code> is <code>bash #cmd</code>, which evaluates <code>#cmd</code> in bash, and replaces itself with the resulting output. To illustrate, the following program is another way of writing hello world:</p>
<pre><code>bash (echo &quot;hellozworld&quot; | tr &quot;z&quot; &quot; &quot;)</code></pre>
<p>Note that the <code>bash</code> command isn’t doing any sort of bash parsing here. It just takes the symbols <code>echo</code> <code>"hellozworld"</code> <code>|</code> <code>tr</code> <code>"z"</code> <code>"</code> and <code>"</code>, and dumps them out pretty printed into bash. There are no string literals.</p>
<p>We can use the <code>bash</code> command to do more interesting things. For example, we can use it to define an <code>import</code> statement:</p>
<pre><code>macro (import #file) (bash (cat #file))</code></pre>
<p>which when you evaluate <code>import some/file.nim</code>, will be replaced with <code>(bash (cat some/file.nim))</code>, which in turn with the contents of <code>some/file.nim</code>. You have to admit, there’s something appealing about <em>even the module system</em> being defined in library code.</p>
<p>But we can go further. We can push our math runtime into bash!</p>
<pre><code>macro (math #m) (bash (bc &lt;&lt;&lt; &quot; #m &quot;))</code></pre>
<p>which will correctly evaluate any math expressions you shoot its way.</p>
<p>Personally, I’m not a big fan of the <code>macro #a #b</code> notation. So instead I defined my own sequent notation:</p>
<pre><code>  rassoc 2 ----------
; macro (#a ---------- #b) (macro #a #b)</code></pre>
<p>This thing defines a macro, which, when expanded, will itself define a macro. Now David and I don’t need to have any discussions bikeshedding over syntax. We can just define whatever we want!</p>
<p>For a longer example, I wanted to implement pattern matching a la Haskell.</p>
<p>My first step was to define a lazy <code>if</code> statement. Because macros are tried most-recently-defined first, I can define my operational semantics first. The rule is to force the condition:</p>
<pre><code>; if #cond then #a else #b
  ----------
  if !#cond then #a else #b</code></pre>
<p>(the exclamation marks here are magic inside of the <code>macro</code> macro, which will force macro expansion at whatever it’s attached to) Next, I give two more expansion rules for what to do if my condition is true and false:</p>
<pre><code>; if True then #a else #b
  ----------
  #a

; if False then #a else #b
  ----------
  #b</code></pre>
<p>Great! We can define syntactic equality of stuck terms by forcing two subterms, and then checking them in bash for string equality:</p>
<pre><code>; judge #a #b
  ----------
  is zero !(bash ([[ &quot; !#a &quot; == &quot; !#b &quot; ]]; echo $?))

; is zero #n
  ----------
  False

; is zero 0
  ----------
  True</code></pre>
<p>We can try this out. <code>judge hello hello</code> and <code>judge (macro (a a a) b) defined</code> both step to <code>True</code>, but <code>judge foo bar</code> steps to <code>False</code>.</p>
<p>Finally, we’re ready to define pattern matching. We start with the base case in which there is only one pattern we can match on:</p>
<pre><code>; match #a of (#m1 -&gt; #r1)
  ----------
  if !(judge #a #m1) then #r1 else (failed match)</code></pre>
<p>We replace our match statement with an equality test, and produce <code>failed match</code> if the two things aren’t identical.</p>
<p>There’s also an induction case, where we want to match on several possibilities.</p>
<pre><code>; match #a of (#m1 -&gt; #r1 ; #z)
  ----------
  if !(judge #a #m1) then #r1 else (match !#a of #z)</code></pre>
<p>Here we’d like to perform the same rewrite, but the else case should pop off the failed match.</p>
<p>Amazingly, this all <em>just works</em>. Let’s try it:</p>
<pre><code>; rassoc 3 =

; #a = #b
  ----------
  #a
  ----------
  #b

; not #t =
    match #t of
      ( True -&gt; False
      ; False -&gt; True
      )

; match (not True) of
    ( True -&gt; hello
    ; False -&gt; it works!
    )</code></pre>
<p>This program will get stuck at <code>it works!</code>. Pretty sweet!</p>
<hr />
<p>The core nimic implementation is 420 lines of Haskell code, including a hand-rolled parser and macro engine. But wait, there’s more! There’s also an additional 291 line interactive debugger, which allows you to step through the macro expansion of your program. It’s even smart enough to colorize the variables in your source tree that are being matched by the current macro.</p>
<figure>
<img src="/images/nimic.png" alt="" /><figcaption>The Glorious Nimic Stepper</figcaption>
</figure>
<p>Not bad for a weekend of work. I can barely contain my excitement for what other cool projects are on the horizon.</p>
        ]]>
      </content>
    </entry>
    <entry>
      <title>How I Intend to Help Steer GHC</title>
      <id>blog/steering/index.html</id>
      <link href='blog/steering/index.html'/>
      <published>2019-07-11T17:40:00Z</published>
      <updated>2019-07-11T17:40:00Z</updated>

      <content type="html">
        <![CDATA[
        <p>Yesterday I was (somewhat surprisingly) brought on as a new member of the GHC steering committee. I believe transparency is very important in situations like these, and so I’d like to outline my intentions for my tenure in the committee.</p>
<p>I nominated myself because of problems I perceived in the status-quo. Lately, there have been a few notable cases of dissatisfaction in the community with the proposal process. I have certainly had my qualms with it in the past, but I decided that rather than complain about it, I should just get involved and try my best to help.</p>
<p>Which takes us to today.</p>
<p>I’m extremely humbled to be included with such a group of incredible individuals as my co-committee members are. I don’t claim to know everything about writing industrial-grade compilers, nor about the intricacies of cutting-edge type system research. Most of the time I’m only barely smart enough to keep up with the conversation, let alone have a strongly informed opinion on the topic. WIth that in mind…</p>
<hr />
<p><strong>I don’t intend to be a gatekeeper.</strong> Instead, I intend to be a facilitator; someone whose job it is is to know the right people to bring into the discussion. Nobody in this community is an expert at everything, but everyone has a niche in which they are an expert. I want to make sure that those people are involved in the process in which their expertise can be used.</p>
<p>That’s not to say I’m not going to do everything in my power to understand each and every proposal under my stewardship. Just that I’ll be the first to admit that I don’t know everything, and I don’t want <em>my</em> understanding to get in the way of good ideas!</p>
<hr />
<p><strong>I intend to inspire the committee to <em>move faster.</em></strong> I think any process which can take upwards of two years is too slow — it’s a waste of everyone’s time, energy and attention. My preference is fast responses to proposals, whether it be yea or nay. I don’t want to railroad any decisions, but I also don’t want to sit on the fence out of fear of making the wrong move.</p>
<p>Along those lines, I intend to enthusiastically support any quality-of-life improvements to the language that are small in scope, compose well, and don’t get in the way of <em>active</em>, longer-term goals. Delaying a decision on the basis of “there’s probably a more general solution here that nobody has time to think about, nor do they plan to actually propose” seems like a bad strategy for me. I don’t want to let perfect be the enemy of the <em>much better.</em></p>
<hr />
<p><strong>I intend to preemptively shut down discussions around bikeshedding.</strong> Too often bikeshedding completely derails the conversation. It’s an enormous waste of time. Feelings get hurt, and everyone just talks past one another anyway. I intend to give the proposal author and the Simons the only say on bikeshedding matters. They can canvas for opinions if they’d like, but in my opinion, should do so outside the official proposal channels.</p>
<p>To be clear, I am <em>not</em> saying you shouldn’t offer suggestions if they improve a proposals’ composability, type-safety, elegance or parsimony. But let’s agree as a community that opinions of style are just opinions, and are never going to convince anyone anyway.</p>
<hr />
<p><strong>I intend to remove as many barriers to entry as humanly possible.</strong> The Haskell community is by far the smartest, kindest, most incredible group of people I’ve ever had the good fortune to be a part of. I firmly believe that each and every one of us has great things to contribute to this community, and I suspect the world would be a better place if more of us felt like we had some ownership over the language.</p>
<p>Please take a moment to remember that Haskell is only as great as we make it. There is no “community,” nor is there a “GHCHQ.” There are just people who step up to solve the problems that they see. I encourage you to be one of those people. You don’t need permission. You just need to be kind, genuine and hard-working. Remember that nobody involved in our community is stupid, and if they “just don’t get it,” maybe your argument wasn’t as persuasive as you thought.</p>
<p>All of this goes beyond making proposals to the compiler. Be the community you want to see. Don’t assume somebody else is going to do it for you.</p>
<hr />
<p>Last but not least, <strong>I intend to be a good addition to this committee.</strong> <a href="https://whatiswrongwith.me/isovector">I solicit anonymous feedback</a>, so please don’t hesitate to call me out if you’re ever unhappy with my behavior. I promise to not be offended by any constructive feedback you send my way.</p>
<p>I will do my best to stay honest to these intentions, but help keep me in tow when I slip up.</p>
<hr />
<p>The GHC steering committee is a thankless job. I’d like to take a moment to explicitly call out every member of the committee, past and present, for their selfless commitments to the community. These are people who are taking time out of their own research and projects in order to make our fantastic language much more transparent than it would be otherwise. Really and truly, these people are heroes, even if we don’t always agree with their decisions. <em>Thank you,</em> from the very bottom of my heart.</p>
<p>Finally, <strong>I intend to live up to everyone’s expectations.</strong> Thanks for your time.</p>
        ]]>
      </content>
    </entry>
    <entry>
      <title>Polysemy Internals: The Effect-Interpreter Effect</title>
      <id>blog/tactics/index.html</id>
      <link href='blog/tactics/index.html'/>
      <published>2019-06-26T17:26:00Z</published>
      <updated>2019-06-26T17:26:00Z</updated>

      <content type="html">
        <![CDATA[
        <blockquote>
<p>aka “what the hell is that <code>Tactics</code> stuff?”</p>
</blockquote>
<p>This is the second post in a series of implementation details in <a href="https://github.com/polysemy-research/polysemy">polysemy</a> — a fast, powerful and low-boilerplate effect-system library.</p>
<hr />
<p>In the <a href="/blog/freer-higher-order-effects/">last post</a> we discussed the <code>Yo</code> type, which accumulates weaving functions of the form <code>Functor f =&gt; f () -&gt; (∀ x. f (m x) -&gt; n (f x)) -&gt; e m a -&gt; e n (f a)</code>. As a quick reminder, the <code>f</code> functor corresponds to some piece of (possibly trivial) state, and the <code>∀ x. f (m x) -&gt; n (f x)</code> is a distribution function, roughly analogous to a function like <code>runStateT</code>.</p>
<p>Where our story left off, we had accumulated all of our desired <code>weave</code>s into <code>Yo</code>, but hadn’t yet used them for anything. The developer experience around <code>Yo</code> is fraught with peril, and even as the guy who implemented it, I’m often stymied about how to get all the types to line up. Such a detail is not the sort of thing you can expose in a library that you expect people to actually use.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Yo</span> e m a <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  <span class="dt">Yo</span><span class="ot"> ::</span> <span class="dt">Functor</span> f</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>     <span class="ot">=&gt;</span> e m a</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>     <span class="ot">-&gt;</span> f ()</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>     <span class="ot">-&gt;</span> (<span class="ot">∀</span> x<span class="op">.</span> f (m x) <span class="ot">-&gt;</span> n (f x))</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>     <span class="ot">-&gt;</span> (f a <span class="ot">-&gt;</span> b)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>     <span class="ot">-&gt;</span> <span class="dt">Yo</span> e n b</span></code></pre></div>
<p>At the types <code>Yo</code> usually gets instantiated, it looks something like <code>Yo (State s) (Sem r) Int</code>. Which looks easy enough, until you realize that packed inside of this thing is an existential <code>m</code> (which was originally a <code>Sem r0</code> for some unknown effect row <code>r0</code>), and an existential functor <code>f</code> which is all of the initial state we’re carrying around from other effects who have already run.</p>
<p><code>Yo</code> is the free <code>Effect</code>, which means that like all free structures, it provides dependency injection so you can later decide what that <code>Effect</code> means. It’s not a magic bullet — you still need to actually write code somewhere. <em>Somebody</em> needs to actually use that <code>f ()</code> and <code>∀ x. f (m x) -&gt; n (f x)</code> to actually do something!</p>
<p>As a first attempt, let’s see what happens if we just expose them in the interpretation API. We’ll write a quick <code>interpret</code> function which can handle an effect <code>e m x</code> by producing a <code>Sem r (f x)</code>. The implementation is given below. Don’t worry too much about its body; but pay attention to just how gruesome the type is.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>interpret</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="ot">    ::</span> (<span class="ot">∀</span> x m f</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>           <span class="op">.</span> <span class="dt">Functor</span> f</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>          <span class="ot">=&gt;</span> f ()                                  <span class="co">-- initial state</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>          <span class="ot">-&gt;</span> (<span class="ot">∀</span> y<span class="op">.</span> f (m y) <span class="ot">-&gt;</span> <span class="dt">Sem</span> (e &#39;<span class="op">:</span> r) (f y))  <span class="co">-- distrib function</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>          <span class="ot">-&gt;</span> e m x                                 <span class="co">-- effect constructor</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>          <span class="ot">-&gt;</span> <span class="dt">Sem</span> r (f x)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>       )</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> (e &#39;<span class="op">:</span> r) a</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>interpret f (<span class="dt">Sem</span> m) <span class="ot">=</span> m <span class="op">$</span> \u <span class="ot">-&gt;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>  <span class="kw">case</span> decomp u <span class="kw">of</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>    <span class="dt">Right</span> (<span class="dt">Yo</span> eff state distrib y) <span class="ot">-&gt;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>      <span class="fu">fmap</span> y <span class="op">$</span> f state distrib eff</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>    <span class="dt">Left</span>  another_effect <span class="ot">-&gt;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>      liftSem <span class="op">$</span> hoist (interpret f) another_effect</span></code></pre></div>
<p>For example, we can use it to implement an interpretation of the <code>Reader</code> effect:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Reader</span> i m a <span class="kw">where</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>  <span class="dt">Ask</span><span class="ot"> ::</span> <span class="dt">Reader</span> i m i</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>  <span class="dt">Local</span><span class="ot"> ::</span> (i <span class="ot">-&gt;</span> i) <span class="ot">-&gt;</span> m a <span class="ot">-&gt;</span> <span class="dt">Reader</span> i m a</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="ot">runReader ::</span> i <span class="ot">-&gt;</span> <span class="dt">Sem</span> (<span class="dt">Reader</span> i &#39;<span class="op">:</span> r) a <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>runReader i <span class="ot">=</span> interpret <span class="op">$</span> \state distrib <span class="ot">-&gt;</span> \<span class="kw">case</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>  <span class="dt">Ask</span>        <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="op">$</span> i <span class="op">&lt;$</span> state</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>  <span class="dt">Local</span> f ma <span class="ot">-&gt;</span> runReader (f i) <span class="op">$</span> distrib <span class="op">$</span> ma <span class="op">&lt;$</span> state</span></code></pre></div>
<p>Because <code>Ask</code> doesn’t have any embedded computations, it doesn’t need to do anything fancy. It can just ice-cream cone to put <code>i</code> inside of the state it was given, and return that. But <code>Local</code> is a more complicated beast! It must ice-cream cone its <code>ma</code> computation into the state, and then <code>distrib</code> that thing into a <code>Sem (Reader i '; r)</code>, and then run the <code>Reader</code> effect off of that!</p>
<p>It’s not the end of the world, but it’s a nontrivial amount of boilerplate <em>that needs to be duplicated for every interpreter.</em> Combined with the terrifying types, this feels like a no-go.</p>
<p>Let’s look at an interpretation for the <code>Resource</code> effect (which gives <code>bracket</code> semantics.) <code>Resource</code> is more complicated than <code>Reader</code>, and this complexity serves to illustrate some common patterns that come up and up again when writing interpreters.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Resource</span> m a <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>  <span class="dt">Bracket</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="ot">      ::</span> m a         <span class="co">-- allocate</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>      <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b)  <span class="co">-- finalize</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>      <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m c)  <span class="co">-- use</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>      <span class="ot">-&gt;</span> <span class="dt">Resource</span> m c</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>runResource</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a><span class="ot">    ::</span> <span class="ot">∀</span> r a</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>     <span class="op">.</span> <span class="dt">Member</span> (<span class="dt">Lift</span> <span class="dt">IO</span>) r</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>    <span class="ot">=&gt;</span> (<span class="ot">∀</span> x<span class="op">.</span> <span class="dt">Sem</span> r x <span class="ot">-&gt;</span> <span class="dt">IO</span> x)  <span class="co">-- irrelevant to the discussion</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> (<span class="dt">Resource</span> &#39;<span class="op">:</span> r) a</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>runResource lower <span class="ot">=</span> interpret <span class="op">$</span> \state distrib <span class="ot">-&gt;</span> \<span class="kw">case</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>  <span class="dt">Bracket</span> alloc finalize use <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>    <span class="kw">let</span><span class="ot"> toIO ::</span> <span class="dt">Sem</span> (<span class="dt">Resource</span> &#39;<span class="op">:</span> r) x <span class="ot">-&gt;</span> <span class="dt">IO</span> x</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>        toIO <span class="ot">=</span> lower <span class="op">.</span> runResource lower</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true"></a>    sendM <span class="op">$</span> X.bracket</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true"></a>      (toIO <span class="op">$</span> distrib <span class="op">$</span> alloc <span class="op">&lt;$</span> state)         <span class="co">-- 1</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true"></a>      (\a <span class="ot">-&gt;</span> toIO <span class="op">$</span> distrib <span class="op">$</span> <span class="fu">fmap</span> finalize a)</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true"></a>      (\a <span class="ot">-&gt;</span> toIO <span class="op">$</span> distrib <span class="op">$</span> <span class="fu">fmap</span> use a)</span></code></pre></div>
<p>The <code>bracket</code> function allocates some resource of type <code>a</code>, provides it to the <code>use</code> block for some computation, and ensures that it will be cleaned up via <code>finalize</code> — even if the <code>use</code> block crashed.</p>
<p>There are a few subtleties in the type instantiation here. In the comment marked <code>-- 1</code>, we run <code>distrib</code> on our <code>m a</code> parameter, which transforms it into an <code>Sem (Resource ': r) (f a)</code>. Note that we’ve introduced an <code>f</code> here! This in turn unifies our <code>finalize</code> and <code>use</code> types as <code>f a -&gt; m b</code> and <code>f a -&gt; m c</code>, respectively. Because we later need to distribute to turn those <code>m</code>s into <code>Sem (Resource ': r)</code>s, we also introduce <code>f</code>s into <code>b</code> and <code>c</code>.</p>
<p>In essence, we end up with functions <code>alloc :: Sem (Resource ': r) (f a)</code>, <code>finalize :: f a -&gt; Sem (Resource ': r) (f b)</code> and <code>use :: f a -&gt; Sem (Resource ': r) (f c)</code>. This threading of <code>f</code> evident in the types corresponds directly to the fact that we need to keep track of other people’s state. As we’ll see in a future post, is indicative of a huge problem with the naive semantics we’ve given to <code>Resource</code> here.</p>
<p>Anyway, looking at <code>runReader</code> and <code>runResource</code>, we see two particular patterns emerge in our interpreters:</p>
<ol type="1">
<li><code>distrib $ ma &lt;$ state</code> for the case of an <code>m a</code> argument</li>
<li><code>\fa -&gt; distrib $ fmap mb fa</code> for the case of an <code>a -&gt; m b</code> argument</li>
</ol>
<p>The insight here is that maybe we can just make these combinators a part of the <code>interpret</code> interface directly, rather than have people write them by hand for each interpreter. It doesn’t help the horrifying types:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>interpret</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ot">    ::</span> (<span class="ot">∀</span> x m f</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>           <span class="op">.</span> <span class="dt">Functor</span> f</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>          <span class="ot">=&gt;</span> (<span class="ot">∀</span> y<span class="op">.</span> m y <span class="ot">-&gt;</span> <span class="dt">Sem</span> (e &#39;<span class="op">:</span> r) (f y))</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>          <span class="ot">-&gt;</span> (<span class="ot">∀</span> y z<span class="op">.</span> (y <span class="ot">-&gt;</span> m z) <span class="ot">-&gt;</span> f y <span class="ot">-&gt;</span> <span class="dt">Sem</span> (e &#39;<span class="op">:</span> r) (f z))</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>          <span class="ot">-&gt;</span> e m x</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>          <span class="ot">-&gt;</span> <span class="dt">Sem</span> r (f x)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>       )</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> (e &#39;<span class="op">:</span> r) a</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>interpret f (<span class="dt">Sem</span> m) <span class="ot">=</span> m <span class="op">$</span> \u <span class="ot">-&gt;</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>  <span class="kw">case</span> decomp u <span class="kw">of</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>    <span class="dt">Right</span> (<span class="dt">Yo</span> eff state distrib y) <span class="ot">-&gt;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>      <span class="fu">fmap</span> y <span class="op">$</span> f (distrib <span class="op">.</span> (<span class="op">&lt;$</span> state))</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>                 (\mf <span class="ot">-&gt;</span> distrib <span class="op">.</span> <span class="fu">fmap</span> mf)</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>                 eff</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a>    <span class="dt">Left</span>  another_effect <span class="ot">-&gt;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a>      liftSem <span class="op">$</span> hoist (interpret f) another_effect</span></code></pre></div>
<p>But it sure as heck improves the ergonomics:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>runResource</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">    ::</span> <span class="ot">∀</span> r a</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>     <span class="op">.</span> <span class="dt">Member</span> (<span class="dt">Lift</span> <span class="dt">IO</span>) r</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>    <span class="ot">=&gt;</span> (<span class="ot">∀</span> x<span class="op">.</span> <span class="dt">Sem</span> r x <span class="ot">-&gt;</span> <span class="dt">IO</span> x)</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> (<span class="dt">Resource</span> &#39;<span class="op">:</span> r) a</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>runResource lower <span class="ot">=</span> interpret <span class="op">$</span> \start continue <span class="ot">-&gt;</span> \<span class="kw">case</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>  <span class="dt">Bracket</span> alloc finalize use <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>    <span class="kw">let</span><span class="ot"> toIO ::</span> <span class="dt">Sem</span> (<span class="dt">Resource</span> &#39;<span class="op">:</span> r) x <span class="ot">-&gt;</span> <span class="dt">IO</span> x</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>        toIO <span class="ot">=</span> lower <span class="op">.</span> runResource lower</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>    sendM <span class="op">$</span> X.bracket</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>      (toIO <span class="op">$</span> start alloc)</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>      (toIO <span class="op">.</span> continue finalize)</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>      (toIO <span class="op">.</span> continue use)</span></code></pre></div>
<p>Much nicer! If only we could do something about those gnarly types, we’d be in business!</p>
<p>The last conceptual step here is to realize that the <code>start :: ∀ y. m y -&gt; Sem (e ': r) (f y)</code> and <code>continue :: ∀ y z. (y -&gt; m z) -&gt; f y -&gt; Sem (e ': r) (f z)</code> parameters are static. That means we could stick them into a reader monad — or perhaps more mind-crushingly, an <em>effect.</em></p>
<p>And so, we can provide the two following primitive actions in our <code>Tactics</code> effect, and then derive <code>start</code> and <code>continue</code> from them:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Tactics</span> f n r m a <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>  <span class="dt">GetInitialState</span><span class="ot">     ::</span> <span class="dt">Tactics</span> f n r m (f ())</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>  <span class="dt">HoistInterpretation</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> n b) <span class="ot">-&gt;</span> <span class="dt">Tactics</span> f n r m (f a <span class="ot">-&gt;</span> <span class="dt">Sem</span> r (f b))</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">WithTactics</span> e f m r <span class="ot">=</span> <span class="dt">Tactics</span> f m (e &#39;<span class="op">:</span> r) &#39;<span class="op">:</span> r</span></code></pre></div>
<p>This thing is a mess of type parameters, but <code>f</code> is exactly what you’d expect. The <code>n</code> corresponds to what <code>m</code> used to be (it’s standard operating procedure in polysemy to use <code>m</code> as the name of the second-last type argument.) And we introduce <code>r</code> which corresponds to the effect row that we’re trying to interpret.</p>
<p>Interpreters for effect actions <code>e m</code> end up running with the <code>∀ f. Functor f =&gt; WithTactics e f m r</code> effect row. This thing gives us access to a <code>Tactics</code> capable of producing <code>Sem (e ': r)</code>s, but doesn’t <em>itself</em> have access to <code>e</code> effects.</p>
<p>Finally, we use a type synonym to hide most of the nasty details.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Tactical</span> e m r x <span class="ot">=</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>  <span class="ot">∀</span> f<span class="op">.</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> <span class="dt">Sem</span> (<span class="dt">WithTactics</span> e f m r) (f x)</span></code></pre></div>
<p>Given an appropriate <code>runTactics</code> interpreter:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>runTactics</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="ot">   ::</span> <span class="dt">Functor</span> f</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>   <span class="ot">=&gt;</span> f ()</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>   <span class="ot">-&gt;</span> (<span class="ot">∀</span> x<span class="op">.</span> f (m x) <span class="ot">-&gt;</span> <span class="dt">Sem</span> r2 (f x))</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>   <span class="ot">-&gt;</span> <span class="dt">Sem</span> (<span class="dt">Tactics</span> f m r2 &#39;<span class="op">:</span> r) a</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>   <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>runTactics state distrib (<span class="dt">Sem</span> m) <span class="ot">=</span> m <span class="op">$</span> \u <span class="ot">-&gt;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>  <span class="kw">case</span> decomp u <span class="kw">of</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a>    <span class="dt">Left</span> x <span class="ot">-&gt;</span> liftSem <span class="op">$</span> hoist (runTactics state distrib) x</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a>    <span class="dt">Right</span> (<span class="dt">Yo</span> <span class="dt">GetInitialState</span> state&#39; _ y _) <span class="ot">-&gt;</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a>      <span class="fu">pure</span> <span class="op">$</span> y <span class="op">$</span> state <span class="op">&lt;$</span> state&#39;</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true"></a>    <span class="dt">Right</span> (<span class="dt">Yo</span> (<span class="dt">HoistInterpretation</span> na) state&#39; _ y _) <span class="ot">-&gt;</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true"></a>      <span class="fu">pure</span> <span class="op">$</span> y <span class="op">$</span> (distrib <span class="op">.</span> <span class="fu">fmap</span> na) <span class="op">&lt;$</span> state&#39;</span></code></pre></div>
<p>We can finally implement <code>interpret</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>interpret</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="ot">    ::</span> (<span class="ot">∀</span> x m <span class="op">.</span> e m x <span class="ot">-&gt;</span> <span class="dt">Tactical</span> e m r x)</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> (e &#39;<span class="op">:</span> r) a</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>interpret f (<span class="dt">Sem</span> m) <span class="ot">=</span> m <span class="op">$</span> \u <span class="ot">-&gt;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>  <span class="kw">case</span> decomp u <span class="kw">of</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>    <span class="dt">Left</span>  x <span class="ot">-&gt;</span> liftSem <span class="op">$</span> hoist (interpret f) x</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a>    <span class="dt">Right</span> (<span class="dt">Yo</span> eff state distrib y) <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a>      a <span class="ot">&lt;-</span> runTactics state distrib <span class="op">$</span> f eff</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a>      <span class="fu">pure</span> <span class="op">$</span> y a</span></code></pre></div>
<p>We’ve hid all of the nasty type inside of that <code>Tactical</code> synonym (which admittedly is still gross, but at least it’s not rank 3.) And we’ve create an effect interpreter effect in which we can put any combinators people will need for writing interpreters.</p>
<p>After renaming <code>start</code> to <code>runT</code> and <code>continue</code> to <code>bindT</code> for branding purposes, <code>runResource</code> ends up in its final form:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a>runResource</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a><span class="ot">    ::</span> <span class="ot">∀</span> r a</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>     <span class="op">.</span> <span class="dt">Member</span> (<span class="dt">Lift</span> <span class="dt">IO</span>) r</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>    <span class="ot">=&gt;</span> (<span class="ot">∀</span> x<span class="op">.</span> <span class="dt">Sem</span> r x <span class="ot">-&gt;</span> <span class="dt">IO</span> x)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> (<span class="dt">Resource</span> &#39;<span class="op">:</span> r) a</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a>runResource lower <span class="ot">=</span> interpret <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a>  <span class="dt">Bracket</span> alloc dealloc use <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a>    <span class="kw">let</span><span class="ot"> toIO ::</span> <span class="dt">Sem</span> (<span class="dt">Resource</span> &#39;<span class="op">:</span> r) x <span class="ot">-&gt;</span> <span class="dt">IO</span> x</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true"></a>        toIO <span class="ot">=</span> lower <span class="op">.</span> runResource lower</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true"></a></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true"></a>    a <span class="ot">&lt;-</span> runT  alloc</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true"></a>    d <span class="ot">&lt;-</span> bindT dealloc</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true"></a>    u <span class="ot">&lt;-</span> bindT use</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true"></a>    sendM <span class="op">$</span> X.bracket (toIO a) (toIO <span class="op">.</span> d) (toIO <span class="op">.</span> u)</span></code></pre></div>
<p>I’m unable to properly express the amount of joy I get in using a library to implement core features in itself. The result is one of the most mind-crushingly meta things I’ve ever written, but it elegantly solves a real problem — so why not?</p>
<p>In the next post in this series, we’ll discuss the semantics behind the order in which you interpret effects, and how this can get you into trouble with things like <code>runResource</code>. Stay tuned.</p>
        ]]>
      </content>
    </entry>
</feed>

